{"history":[],"clickedFiles":["app/Services/Loan/CreditService.php"],"updateSections":[{"path":"resources/views/livewire/dashboard/front-desk.blade.php","isApplying":false,"isWaiting":false,"linesNum":0,"codePath":"resources/views/livewire/dashboard/front-desk.blade.php","totalLinesNum":1},{"path":"app/Http/Livewire/Loans/Assessment.php","isApplying":false,"isWaiting":false,"linesNum":0,"codePath":"app/Http/Livewire/Loans/Assessment.php","totalLinesNum":1},{"path":"app/Http/Livewire/Accounting/DisbursementTable.php","isApplying":false,"isWaiting":false,"linesNum":0,"codePath":"app/Http/Livewire/Accounting/DisbursementTable.php","totalLinesNum":1},{"path":"app/Http/Livewire/Accounting/LoansTable.php","isApplying":false,"isWaiting":false,"linesNum":0,"codePath":"app/Http/Livewire/Accounting/LoansTable.php","totalLinesNum":1},{"path":"app/Http/Livewire/Accounting/LoansDisbursement.php","isApplying":false,"isWaiting":false,"linesNum":0,"codePath":"app/Http/Livewire/Accounting/LoansDisbursement.php","totalLinesNum":1},{"path":"resources/views/livewire/accounting/loans-disbursement.blade.php","isApplying":false,"isWaiting":false,"linesNum":0,"codePath":"resources/views/livewire/accounting/loans-disbursement.blade.php","totalLinesNum":1},{"path":"app/Services/Loan/CreditService.php","isApplying":false,"isWaiting":false,"linesNum":0}],"snippets":[{"snippet":"            $amount=$charge->percentage_charge_amount * $this->principle /100 ;","filePath":"app/Http/Livewire/Loans/Assessment.php","lineRange":"151-151"}],"systemMessage":"# 现有代码\n\n## app/Services/Loan/CreditService.php\n```php\n<?php\n\nnamespace App\\Services\\Loan;\n\nuse App\\Livewire\\Accounting\\Account;\nuse App\\Models\\Account as Accounts;\nuse App\\Models\\AccountsModel;\nuse App\\Models\\Activity;\nuse App\\Models\\general_ledger;\nuse App\\Models\\GeneralLedger;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Log;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass CreditService\n{\n\n    // credit only dest account\n\n    public function makeTransaction($source_account, $amount, $destination_accounts, $narration)\n    {\n        DB::beginTransaction();\n        try {\n            $this->disburse($source_account, $amount, $destination_accounts, $narration);\n            DB::commit();\n            return \"successfully \";\n        } catch (\\Exception $e) {\n            DB::rollBack();\n            return $e->getMessage();\n        }\n    }\n\n\n\n    public function disburse($source_account, $amount, $destination_accounts, $narration)\n    {\n        // get source account details\n        $reference_number = time();\n        $accounts = AccountsModel::where(\"account_number\", $source_account)->first();\n        $destination_account = AccountsModel::where(\"account_number\", $destination_accounts)->first();\n\n        if ($accounts && $destination_account) {\n\n            $destinantion_account_name = $destination_account->account_name;\n\n            // credit\n            $destination_account_prev_balance = $destination_account->balance;\n            $destination_account_new_balance = (float) ($destination_account_prev_balance + $amount);\n            // update account balance\n            AccountsModel::where('account_number', $destination_account->account_number)->update(['balance' => $destination_account_new_balance]);\n\n            $this->credit($reference_number, $source_account, $destination_accounts, $amount, $narration, $destination_account_new_balance, $accounts->account_name, $destinantion_account_name);\n\n        }\n\n\n\n}\n\n\n\n\n    public function credit($reference, $source_account_number, $destination_account_number, $credit, $narration, $running_balance, $source_account_name, $destinantion_account_name)\n    {\n\n\n        /**\n         * @var mixed prepare sender data\n         */\n\n        $sender_branch_id='';\n        $sender_product_id='';\n        $sender_sub_product_id='';\n        $sender_id='';\n        $sender_name='';\n\n\n        $senderInfo=  DB::table('members')->where('member_number', DB::table('accounts')\n                     ->where('account_number', $destinantion_account_name)->value('member_number'))->first();\n        if($senderInfo){\n             $accounts=DB::table('accounts')->where('account_number',$source_account_number)->first();\n            $sender_branch_id=$senderInfo->branch_id;\n            $sender_product_id=$accounts->category_code;\n            $sender_sub_product_id=$accounts->sub_category_code;\n            $sender_id=$senderInfo->client_number;\n            $sender_name=$senderInfo->first_name.' '.$senderInfo->middle_name.' .'.$senderInfo->last_name;\n\n        }\n\n        //DEBIT RECORD MEMBER\n         $beneficiary_branch_id='';\n         $beneficiary_product_id='';\n         $beneficiary_sub_product_id='';\n         $beneficiary_id='';\n         $beneficiary_name='';\n\n        $receiverInfo= DB::table('members')->where('member_number', DB::table('accounts')\n                      ->where('account_number', $destinantion_account_name)->value('client_number'))->first();\n        if($receiverInfo){\n\n            $accounts=DB::table('accounts')->where('account_number',$source_account_number)->first();\n            $beneficiary_branch_id=$senderInfo->branch_id;\n            $beneficiary_product_id=$accounts->category_code;\n            $beneficiary_sub_product_id=$accounts->sub_category_code;\n            $beneficiary_id=$senderInfo->client_number;\n            $beneficiary_name=$senderInfo->first_name.' '.$senderInfo->middle_name.' '.$senderInfo->last_name;\n        }\n\n\n        general_ledger::create([\n            'record_on_account_number' => $destination_account_number ? :0,\n            'record_on_account_number_balance' => $running_balance ? :0,\n            'sender_branch_id' =>$sender_branch_id  ? :0,\n            'beneficiary_branch_id' => $beneficiary_branch_id  ? :0,\n           'sender_product_id' => $sender_sub_product_id  ? :0,\n            'sender_sub_product_id' =>  $sender_product_id  ? :0,\n           'beneficiary_product_id' => $beneficiary_product_id  ?:1,\n            'beneficiary_sub_product_id' => $beneficiary_sub_product_id  ?:1,\n            'sender_id' =>  $sender_id  ?:1,\n            'beneficiary_id' => $beneficiary_id  ?:1,\n            'sender_name' => $sender_name,\n            'beneficiary_name' => $beneficiary_name,\n            'sender_account_number' => $source_account_number,\n            'beneficiary_account_number' => $destination_account_number,\n            'transaction_type' => 'IFT',\n            'sender_account_currency_type' => 'TZS',\n            'beneficiary_account_currency_type' => 'TZS',\n            'narration' => $narration,\n            'credit'  => (double)$credit,\n            'debit' => 0,\n            'reference_number' => $reference,\n            'trans_status' => 'Successful',\n            'trans_status_description' => 'Successful',\n            'swift_code' => '',\n            'destination_bank_name' => '',\n            'destination_bank_number' => '',\n            'payment_status' => 'Successful',\n            'recon_status' => 'Pending',\n            'partner_bank_transaction_reference_number' => '0000',\n\n        ]);\n\n\n\n    }\n\n\n}\n\n```\n\n\n# 角色设置\n- 扮演专家级软件开发人员，根据问题完成代码编写或修改。\n- 你需要按照以下步骤解决问题：\n  - 第一步，对问题内容进行重申，让问题逻辑更加清晰。\n  - 第二步，阐述问题的解决思路或方法。\n  - 第三步，编写或修改代码。\n\n# 代码要求\n- 修改代码时，只需要编写与本问题有关的部分，对于不需要修改的代码行，使用\"...existing code ...\"注释代替即可，避免重复。\n- 编写或修改代码都需要遵循格式：## <codeFilePath>\n```<language>\n<code>\n```\n注意代码文件路径在代码块外部，而不是内部。当修改现有代码时，代码文件路径必须与现有代码文件路径保持一致，不要添加任何名称前缀或后缀。\n\n# 其他要求\n回答问题时，代码内容应使用英文，注释或交流应使用中文。","fileContentPairs":[{"filePath":"app/Services/Loan/CreditService.php","fileContent":"<?php\n\nnamespace App\\Services\\Loan;\n\nuse App\\Livewire\\Accounting\\Account;\nuse App\\Models\\Account as Accounts;\nuse App\\Models\\AccountsModel;\nuse App\\Models\\Activity;\nuse App\\Models\\general_ledger;\nuse App\\Models\\GeneralLedger;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Log;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass CreditService\n{\n\n    // credit only dest account\n\n    public function makeTransaction($source_account, $amount, $destination_accounts, $narration)\n    {\n        DB::beginTransaction();\n        try {\n            $this->disburse($source_account, $amount, $destination_accounts, $narration);\n            DB::commit();\n            return \"successfully \";\n        } catch (\\Exception $e) {\n            DB::rollBack();\n            return $e->getMessage();\n        }\n    }\n\n\n\n    public function disburse($source_account, $amount, $destination_accounts, $narration)\n    {\n        // get source account details\n        $reference_number = time();\n        $accounts = AccountsModel::where(\"account_number\", $source_account)->first();\n        $destination_account = AccountsModel::where(\"account_number\", $destination_accounts)->first();\n\n        if ($accounts && $destination_account) {\n\n            $destinantion_account_name = $destination_account->account_name;\n\n            // credit\n            $destination_account_prev_balance = $destination_account->balance;\n            $destination_account_new_balance = (float) ($destination_account_prev_balance + $amount);\n            // update account balance\n            AccountsModel::where('account_number', $destination_account->account_number)->update(['balance' => $destination_account_new_balance]);\n\n            $this->credit($reference_number, $source_account, $destination_accounts, $amount, $narration, $destination_account_new_balance, $accounts->account_name, $destinantion_account_name);\n\n        }\n\n\n\n}\n\n\n\n\n    public function credit($reference, $source_account_number, $destination_account_number, $credit, $narration, $running_balance, $source_account_name, $destinantion_account_name)\n    {\n\n\n        /**\n         * @var mixed prepare sender data\n         */\n\n        $sender_branch_id='';\n        $sender_product_id='';\n        $sender_sub_product_id='';\n        $sender_id='';\n        $sender_name='';\n\n\n        $senderInfo=  DB::table('members')->where('member_number', DB::table('accounts')\n                     ->where('account_number', $destinantion_account_name)->value('member_number'))->first();\n        if($senderInfo){\n             $accounts=DB::table('accounts')->where('account_number',$source_account_number)->first();\n            $sender_branch_id=$senderInfo->branch_id;\n            $sender_product_id=$accounts->category_code;\n            $sender_sub_product_id=$accounts->sub_category_code;\n            $sender_id=$senderInfo->client_number;\n            $sender_name=$senderInfo->first_name.' '.$senderInfo->middle_name.' .'.$senderInfo->last_name;\n\n        }\n\n        //DEBIT RECORD MEMBER\n         $beneficiary_branch_id='';\n         $beneficiary_product_id='';\n         $beneficiary_sub_product_id='';\n         $beneficiary_id='';\n         $beneficiary_name='';\n\n        $receiverInfo= DB::table('members')->where('member_number', DB::table('accounts')\n                      ->where('account_number', $destinantion_account_name)->value('client_number'))->first();\n        if($receiverInfo){\n\n            $accounts=DB::table('accounts')->where('account_number',$source_account_number)->first();\n            $beneficiary_branch_id=$senderInfo->branch_id;\n            $beneficiary_product_id=$accounts->category_code;\n            $beneficiary_sub_product_id=$accounts->sub_category_code;\n            $beneficiary_id=$senderInfo->client_number;\n            $beneficiary_name=$senderInfo->first_name.' '.$senderInfo->middle_name.' '.$senderInfo->last_name;\n        }\n\n\n        general_ledger::create([\n            'record_on_account_number' => $destination_account_number ? :0,\n            'record_on_account_number_balance' => $running_balance ? :0,\n            'sender_branch_id' =>$sender_branch_id  ? :0,\n            'beneficiary_branch_id' => $beneficiary_branch_id  ? :0,\n           'sender_product_id' => $sender_sub_product_id  ? :0,\n            'sender_sub_product_id' =>  $sender_product_id  ? :0,\n           'beneficiary_product_id' => $beneficiary_product_id  ?:1,\n            'beneficiary_sub_product_id' => $beneficiary_sub_product_id  ?:1,\n            'sender_id' =>  $sender_id  ?:1,\n            'beneficiary_id' => $beneficiary_id  ?:1,\n            'sender_name' => $sender_name,\n            'beneficiary_name' => $beneficiary_name,\n            'sender_account_number' => $source_account_number,\n            'beneficiary_account_number' => $destination_account_number,\n            'transaction_type' => 'IFT',\n            'sender_account_currency_type' => 'TZS',\n            'beneficiary_account_currency_type' => 'TZS',\n            'narration' => $narration,\n            'credit'  => (double)$credit,\n            'debit' => 0,\n            'reference_number' => $reference,\n            'trans_status' => 'Successful',\n            'trans_status_description' => 'Successful',\n            'swift_code' => '',\n            'destination_bank_name' => '',\n            'destination_bank_number' => '',\n            'payment_status' => 'Successful',\n            'recon_status' => 'Pending',\n            'partner_bank_transaction_reference_number' => '0000',\n\n        ]);\n\n\n\n    }\n\n\n}\n"}],"model":"qwen2.5-coder:7b-instruct-q8_0"}